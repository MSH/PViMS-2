// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PVIMS.Infrastructure;

namespace PViMS.Infrastructure.Migrations
{
    [DbContext(typeof(PVIMSDbContext))]
    [Migration("20210412092918_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("PVIMS.Core.Entities.Accounts.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<string>("RemoteIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Accounts.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Accounts.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowDatasetDownload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("CurrentContext")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EulaAcceptanceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Accounts.UserFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FacilityId")
                        .HasColumnType("int")
                        .HasColumnName("Facility_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "FacilityId")
                        .IsUnique();

                    b.HasIndex(new[] { "FacilityId" }, "IX_Facility_Id");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id")
                        .HasDatabaseName("IX_User_Id1");

                    b.ToTable("UserFacility");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Accounts.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "IX_Role_Id");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id")
                        .HasDatabaseName("IX_User_Id2");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("QualifiedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int")
                        .HasColumnName("WorkFlow_Id");

                    b.HasKey("Id");

                    b.HasIndex("QualifiedName", "WorkFlowId")
                        .IsUnique();

                    b.HasIndex(new[] { "WorkFlowId" }, "IX_WorkFlow_Id");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ActivityExecutionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnName("Activity_Id");

                    b.Property<int>("Activity_Id")
                        .HasColumnType("int")
                        .HasColumnName("Activity_Id1");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FriendlyDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Description", "ActivityId")
                        .IsUnique();

                    b.HasIndex(new[] { "ActivityId" }, "IX_Activity_Id");

                    b.ToTable("ActivityExecutionStatus");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ActivityExecutionStatusEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ActivityInstanceId")
                        .HasColumnType("int")
                        .HasColumnName("ActivityInstance_Id");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContextCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ContextDateTime")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int>("EventCreatedById")
                        .HasColumnType("int")
                        .HasColumnName("EventCreatedBy_Id");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ExecutionStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionStatus_Id");

                    b.HasKey("Id");

                    b.HasIndex("ActivityInstanceId", "ExecutionStatusId")
                        .IsUnique();

                    b.HasIndex(new[] { "ActivityInstanceId" }, "IX_ActivityInstance_Id");

                    b.HasIndex(new[] { "EventCreatedById" }, "IX_EventCreatedBy_Id");

                    b.HasIndex(new[] { "ExecutionStatusId" }, "IX_ExecutionStatus_Id");

                    b.ToTable("ActivityExecutionStatusEvent");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ActivityInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<int>("CurrentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentStatus_Id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("QualifiedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReportInstanceId")
                        .HasColumnType("int")
                        .HasColumnName("ReportInstance_Id");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex("QualifiedName", "ReportInstanceId")
                        .IsUnique();

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id");

                    b.HasIndex(new[] { "CurrentStatusId" }, "IX_CurrentStatus_Id");

                    b.HasIndex(new[] { "ReportInstanceId" }, "IX_ReportInstance_Id");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id");

                    b.ToTable("ActivityInstance");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Cancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<bool>("Dna")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DNA");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDate");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id1");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id1");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ActivityExecutionStatusEventId")
                        .HasColumnType("int")
                        .HasColumnName("ActivityExecutionStatusEvent_Id");

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AttachmentType_Id");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EncounterId")
                        .HasColumnType("int")
                        .HasColumnName("Encounter_Id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ActivityExecutionStatusEventId" }, "IX_ActivityExecutionStatusEvent_Id");

                    b.HasIndex(new[] { "AttachmentTypeId" }, "IX_AttachmentType_Id");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id")
                        .HasDatabaseName("IX_AuditUser_Id1");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id2");

                    b.HasIndex(new[] { "EncounterId" }, "IX_Encounter_Id");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id1");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id2");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.AttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("AttachmentType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("AuditType")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ActionDate");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id")
                        .HasDatabaseName("IX_User_Id3");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.CareEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("CareEvent");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.CohortGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CohortCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CohortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_Id");

                    b.Property<DateTime?>("FinishDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int>("LastPatientNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MaxEnrolment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MinEnrolment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CohortCode")
                        .IsUnique();

                    b.HasIndex("CohortName")
                        .IsUnique();

                    b.HasIndex(new[] { "ConditionId" }, "IX_Condition_Id");

                    b.ToTable("CohortGroup");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.CohortGroupEnrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<int>("CohortGroupId")
                        .HasColumnType("int")
                        .HasColumnName("CohortGroup_Id");

                    b.Property<DateTime?>("DeenroledDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EnroledDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id")
                        .HasDatabaseName("IX_AuditUser_Id2");

                    b.HasIndex(new[] { "CohortGroupId" }, "IX_CohortGroup_Id");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id2");

                    b.ToTable("CohortGroupEnrolment");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Concept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConceptName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MedicationFormId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationForm_Id");

                    b.HasKey("Id");

                    b.HasIndex("ConceptName", "MedicationFormId")
                        .IsUnique();

                    b.HasIndex(new[] { "MedicationFormId" }, "IX_MedicationForm_Id");

                    b.ToTable("Concept");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ConceptIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ConceptId")
                        .HasColumnType("int")
                        .HasColumnName("Concept_Id");

                    b.Property<string>("Ingredient")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ConceptId", "Ingredient", "Strength")
                        .IsUnique();

                    b.HasIndex(new[] { "ConceptId" }, "IX_Concept_Id");

                    b.ToTable("ConceptIngredient");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Chronic")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("Condition");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ConditionLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_Id");

                    b.Property<int>("LabTestId")
                        .HasColumnType("int")
                        .HasColumnName("LabTest_Id");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId", "LabTestId")
                        .IsUnique();

                    b.HasIndex(new[] { "ConditionId" }, "IX_Condition_Id")
                        .HasDatabaseName("IX_Condition_Id1");

                    b.HasIndex(new[] { "LabTestId" }, "IX_LabTest_Id");

                    b.ToTable("ConditionLabTest");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ConditionMedDra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_Id");

                    b.Property<int>("TerminologyMedDraId")
                        .HasColumnType("int")
                        .HasColumnName("TerminologyMedDra_Id");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId", "TerminologyMedDraId")
                        .IsUnique();

                    b.HasIndex(new[] { "ConditionId" }, "IX_Condition_Id")
                        .HasDatabaseName("IX_Condition_Id2");

                    b.HasIndex(new[] { "TerminologyMedDraId" }, "IX_TerminologyMedDra_Id");

                    b.ToTable("ConditionMedDra");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ConditionMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ConceptId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Concept_Id");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_Id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Id");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId", "ConceptId", "ProductId")
                        .IsUnique()
                        .HasFilter("[Product_Id] IS NOT NULL");

                    b.HasIndex(new[] { "ConceptId" }, "IX_Concept_Id")
                        .HasDatabaseName("IX_Concept_Id1");

                    b.HasIndex(new[] { "ConditionId" }, "IX_Condition_Id")
                        .HasDatabaseName("IX_Condition_Id3");

                    b.HasIndex(new[] { "ProductId" }, "IX_Product_Id");

                    b.ToTable("ConditionMedication");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConfigType")
                        .HasColumnType("int");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex("ConfigType");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id3");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id3");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ContextType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContextTypes");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.CustomAttributeConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AttributeDetail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AttributeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomAttributeType")
                        .HasColumnType("int");

                    b.Property<string>("ExtendableTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("FutureDateOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSearchable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("NumericMaxValue")
                        .HasColumnType("int");

                    b.Property<int?>("NumericMinValue")
                        .HasColumnType("int");

                    b.Property<bool>("PastDateOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("StringMaxLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtendableTypeName", "CustomAttributeType", "AttributeKey")
                        .IsUnique()
                        .HasFilter("[AttributeKey] IS NOT NULL");

                    b.ToTable("CustomAttributeConfiguration");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ContextTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ContextType_Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<string>("DatasetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DatasetXmlId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetXml_Id");

                    b.Property<int?>("EncounterTypeWorkPlanId")
                        .HasColumnType("int")
                        .HasColumnName("EncounterTypeWorkPlan_Id");

                    b.Property<string>("Help")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InitialiseProcess")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("RulesProcess")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Uid")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("UID");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex("DatasetName")
                        .IsUnique();

                    b.HasIndex(new[] { "ContextTypeId" }, "IX_ContextType_Id");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id4");

                    b.HasIndex(new[] { "DatasetXmlId" }, "IX_DatasetXml_Id");

                    b.HasIndex(new[] { "EncounterTypeWorkPlanId" }, "IX_EncounterTypeWorkPlan_Id");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id4");

                    b.ToTable("Dataset");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Acute")
                        .HasColumnType("bit");

                    b.Property<short>("CategoryOrder")
                        .HasColumnType("smallint");

                    b.Property<bool>("Chronic")
                        .HasColumnType("bit");

                    b.Property<string>("DatasetCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DatasetId")
                        .HasColumnType("int")
                        .HasColumnName("Dataset_Id");

                    b.Property<int>("Dataset_Id")
                        .HasColumnType("int")
                        .HasColumnName("Dataset_Id1");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Help")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<bool>("System")
                        .HasColumnType("bit");

                    b.Property<string>("Uid")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("UID");

                    b.HasKey("Id");

                    b.HasIndex("Dataset_Id", "DatasetCategoryName")
                        .IsUnique();

                    b.HasIndex(new[] { "DatasetId" }, "IX_Dataset_Id");

                    b.ToTable("DatasetCategory");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetCategoryCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_Id");

                    b.Property<int>("DatasetCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetCategory_Id");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId", "DatasetCategoryId")
                        .IsUnique();

                    b.HasIndex(new[] { "ConditionId" }, "IX_Condition_Id")
                        .HasDatabaseName("IX_Condition_Id4");

                    b.HasIndex(new[] { "DatasetCategoryId" }, "IX_DatasetCategory_Id");

                    b.ToTable("DatasetCategoryCondition");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetCategoryElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Acute")
                        .HasColumnType("bit");

                    b.Property<bool>("Chronic")
                        .HasColumnType("bit");

                    b.Property<int>("DatasetCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetCategory_Id");

                    b.Property<int>("DatasetElementId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetElement_Id");

                    b.Property<short>("FieldOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Help")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<bool>("System")
                        .HasColumnType("bit");

                    b.Property<string>("Uid")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("UID");

                    b.HasKey("Id");

                    b.HasIndex("DatasetCategoryId", "DatasetElementId")
                        .IsUnique();

                    b.HasIndex(new[] { "DatasetCategoryId" }, "IX_DatasetCategory_Id")
                        .HasDatabaseName("IX_DatasetCategory_Id1");

                    b.HasIndex(new[] { "DatasetElementId" }, "IX_DatasetElement_Id");

                    b.ToTable("DatasetCategoryElement");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetCategoryElementCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_Id");

                    b.Property<int>("DatasetCategoryElementId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetCategoryElement_Id");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId", "DatasetCategoryElementId")
                        .IsUnique();

                    b.HasIndex(new[] { "ConditionId" }, "IX_Condition_Id")
                        .HasDatabaseName("IX_Condition_Id5");

                    b.HasIndex(new[] { "DatasetCategoryElementId" }, "IX_DatasetCategoryElement_Id");

                    b.ToTable("DatasetCategoryElementCondition");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("DatasetElementGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("DatasetElementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetElementType_Id");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("Field_Id");

                    b.Property<string>("Oid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OID");

                    b.Property<bool>("System")
                        .HasColumnType("bit");

                    b.Property<string>("Uid")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("UID");

                    b.HasKey("Id");

                    b.HasIndex("ElementName")
                        .IsUnique();

                    b.HasIndex(new[] { "DatasetElementTypeId" }, "IX_DatasetElementType_Id");

                    b.HasIndex(new[] { "FieldId" }, "IX_Field_Id");

                    b.ToTable("DatasetElement");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetElementSub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DatasetElementId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetElement_Id");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("Field_Id");

                    b.Property<short>("FieldOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Help")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Oid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OID");

                    b.Property<bool>("System")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DatasetElementId", "ElementName")
                        .IsUnique();

                    b.HasIndex(new[] { "DatasetElementId" }, "IX_DatasetElement_Id")
                        .HasDatabaseName("IX_DatasetElement_Id1");

                    b.HasIndex(new[] { "FieldId" }, "IX_Field_Id")
                        .HasDatabaseName("IX_Field_Id1");

                    b.ToTable("DatasetElementSub");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetElementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("DatasetElementType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContextId")
                        .HasColumnType("int")
                        .HasColumnName("ContextID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<int>("DatasetId")
                        .HasColumnType("int")
                        .HasColumnName("Dataset_Id");

                    b.Property<Guid>("DatasetInstanceGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int?>("EncounterTypeWorkPlanId")
                        .HasColumnType("int")
                        .HasColumnName("EncounterTypeWorkPlan_Id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id5");

                    b.HasIndex(new[] { "DatasetId" }, "IX_Dataset_Id")
                        .HasDatabaseName("IX_Dataset_Id1");

                    b.HasIndex(new[] { "EncounterTypeWorkPlanId" }, "IX_EncounterTypeWorkPlan_Id")
                        .HasDatabaseName("IX_EncounterTypeWorkPlan_Id1");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id5");

                    b.ToTable("DatasetInstance");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetInstanceSubValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("ContextValue")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DatasetElementSubId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetElementSub_Id");

                    b.Property<int>("DatasetInstanceValueId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetInstanceValue_Id");

                    b.Property<string>("InstanceValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatasetInstanceValueId", "DatasetElementSubId")
                        .IsUnique();

                    b.HasIndex(new[] { "DatasetElementSubId" }, "IX_DatasetElementSub_Id");

                    b.HasIndex(new[] { "DatasetInstanceValueId" }, "IX_DatasetInstanceValue_Id");

                    b.ToTable("DatasetInstanceSubValue");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetInstanceValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DatasetElementId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetElement_Id");

                    b.Property<int>("DatasetInstanceId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetInstance_Id");

                    b.Property<string>("InstanceValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatasetInstanceId", "DatasetElementId")
                        .IsUnique();

                    b.HasIndex(new[] { "DatasetElementId" }, "IX_DatasetElement_Id")
                        .HasDatabaseName("IX_DatasetElement_Id2");

                    b.HasIndex(new[] { "DatasetInstanceId" }, "IX_DatasetInstance_Id");

                    b.ToTable("DatasetInstanceValue");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DestinationElementId")
                        .HasColumnType("int")
                        .HasColumnName("DestinationElement_Id");

                    b.Property<string>("MappingOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MappingType")
                        .HasColumnType("int");

                    b.Property<string>("Property")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceElementId")
                        .HasColumnType("int")
                        .HasColumnName("SourceElement_Id");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DestinationElementId" }, "IX_DestinationElement_Id");

                    b.HasIndex(new[] { "SourceElementId" }, "IX_SourceElement_Id");

                    b.ToTable("DatasetMapping");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetMappingSub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DestinationElementId")
                        .HasColumnType("int")
                        .HasColumnName("DestinationElement_Id");

                    b.Property<int>("MappingId")
                        .HasColumnType("int")
                        .HasColumnName("Mapping_Id");

                    b.Property<string>("MappingOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MappingType")
                        .HasColumnType("int");

                    b.Property<string>("Property")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceElementId")
                        .HasColumnType("int")
                        .HasColumnName("SourceElement_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DestinationElementId" }, "IX_DestinationElement_Id")
                        .HasDatabaseName("IX_DestinationElement_Id1");

                    b.HasIndex(new[] { "MappingId" }, "IX_Mapping_Id");

                    b.HasIndex(new[] { "SourceElementId" }, "IX_SourceElement_Id")
                        .HasDatabaseName("IX_SourceElement_Id1");

                    b.ToTable("DatasetMappingSub");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetMappingValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DestinationValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MappingId")
                        .HasColumnType("int")
                        .HasColumnName("Mapping_Id");

                    b.Property<string>("SourceValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SubMappingId")
                        .HasColumnType("int")
                        .HasColumnName("SubMapping_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MappingId" }, "IX_Mapping_Id")
                        .HasDatabaseName("IX_Mapping_Id1");

                    b.HasIndex(new[] { "SubMappingId" }, "IX_SubMapping_Id");

                    b.ToTable("DatasetMappingValue");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DatasetElementId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetElement_Id");

                    b.Property<int?>("DatasetId")
                        .HasColumnType("int")
                        .HasColumnName("Dataset_Id");

                    b.Property<bool>("RuleActive")
                        .HasColumnType("bit");

                    b.Property<int>("RuleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DatasetElementId" }, "IX_DatasetElement_Id")
                        .HasDatabaseName("IX_DatasetElement_Id3");

                    b.HasIndex(new[] { "DatasetId" }, "IX_Dataset_Id")
                        .HasDatabaseName("IX_Dataset_Id2");

                    b.ToTable("DatasetRule");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetXml", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id6");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id6");

                    b.ToTable("DatasetXml");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetXmlAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<int?>("DatasetElementId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetElement_Id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("ParentNodeId")
                        .HasColumnType("int")
                        .HasColumnName("ParentNode_Id");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id7");

                    b.HasIndex(new[] { "DatasetElementId" }, "IX_DatasetElement_Id")
                        .HasDatabaseName("IX_DatasetElement_Id4");

                    b.HasIndex(new[] { "ParentNodeId" }, "IX_ParentNode_Id");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id7");

                    b.ToTable("DatasetXmlAttribute");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetXmlNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<int?>("DatasetElementId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetElement_Id");

                    b.Property<int?>("DatasetElementSubId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetElementSub_Id");

                    b.Property<int>("DatasetXmlId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetXml_Id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("NodeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NodeType")
                        .HasColumnType("int");

                    b.Property<string>("NodeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("int")
                        .HasColumnName("ParentNode_Id");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex("DatasetXmlId", "NodeName")
                        .IsUnique();

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id8");

                    b.HasIndex(new[] { "DatasetElementSubId" }, "IX_DatasetElementSub_Id")
                        .HasDatabaseName("IX_DatasetElementSub_Id1");

                    b.HasIndex(new[] { "DatasetElementId" }, "IX_DatasetElement_Id")
                        .HasDatabaseName("IX_DatasetElement_Id5");

                    b.HasIndex(new[] { "DatasetXmlId" }, "IX_DatasetXml_Id")
                        .HasDatabaseName("IX_DatasetXml_Id1");

                    b.HasIndex(new[] { "ParentNodeId" }, "IX_ParentNode_Id")
                        .HasDatabaseName("IX_ParentNode_Id1");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id8");

                    b.ToTable("DatasetXmlNode");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Encounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<string>("CustomAttributesXmlSerialised")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discharged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EncounterDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EncounterGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("EncounterTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EncounterType_Id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.Property<int?>("PregnancyId")
                        .HasColumnType("int")
                        .HasColumnName("Pregnancy_Id");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int")
                        .HasColumnName("Priority_Id");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex("EncounterDate");

                    b.HasIndex("PatientId", "EncounterDate");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id")
                        .HasDatabaseName("IX_AuditUser_Id3");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id9");

                    b.HasIndex(new[] { "EncounterTypeId" }, "IX_EncounterType_Id");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id3");

                    b.HasIndex(new[] { "PregnancyId" }, "IX_Pregnancy_Id");

                    b.HasIndex(new[] { "PriorityId" }, "IX_Priority_Id");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id9");

                    b.ToTable("Encounter");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.EncounterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Chronic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Help")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("EncounterType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.EncounterTypeWorkPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CohortGroupId")
                        .HasColumnType("int")
                        .HasColumnName("CohortGroup_Id");

                    b.Property<int>("EncounterTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EncounterType_Id");

                    b.Property<int>("WorkPlanId")
                        .HasColumnType("int")
                        .HasColumnName("WorkPlan_Id");

                    b.HasKey("Id");

                    b.HasIndex("CohortGroupId", "EncounterTypeId", "WorkPlanId")
                        .IsUnique()
                        .HasFilter("[CohortGroup_Id] IS NOT NULL");

                    b.HasIndex(new[] { "CohortGroupId" }, "IX_CohortGroup_Id")
                        .HasDatabaseName("IX_CohortGroup_Id1");

                    b.HasIndex(new[] { "EncounterTypeId" }, "IX_EncounterType_Id")
                        .HasDatabaseName("IX_EncounterType_Id1");

                    b.HasIndex(new[] { "WorkPlanId" }, "IX_WorkPlan_Id");

                    b.ToTable("EncounterTypeWorkPlan");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FacilityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FacilityType_Id");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrgUnitId")
                        .HasColumnType("int")
                        .HasColumnName("OrgUnit_Id");

                    b.Property<string>("TelNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityCode")
                        .IsUnique();

                    b.HasIndex("FacilityName")
                        .IsUnique();

                    b.HasIndex(new[] { "FacilityTypeId" }, "IX_FacilityType_Id");

                    b.HasIndex(new[] { "OrgUnitId" }, "IX_OrgUnit_Id");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("FacilityType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Anonymise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Calculation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("Decimals")
                        .HasColumnType("smallint");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FieldType_Id");

                    b.Property<string>("FileExt")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("FileSize")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<bool>("Mandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<short?>("MaxLength")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("MaxSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RegEx")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FieldTypeId" }, "IX_FieldType_Id");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("FieldType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.FieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("Field_Id");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<bool>("Unknown")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FieldId" }, "IX_Field_Id")
                        .HasDatabaseName("IX_Field_Id2");

                    b.ToTable("FieldValue");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HolidayDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("HolidayDate")
                        .IsUnique();

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.AdverseEventAnnualList", b =>
                {
                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade1Count")
                        .HasColumnType("int");

                    b.Property<int>("Grade2Count")
                        .HasColumnType("int");

                    b.Property<int>("Grade3Count")
                        .HasColumnType("int");

                    b.Property<int>("Grade4Count")
                        .HasColumnType("int");

                    b.Property<int>("Grade5Count")
                        .HasColumnType("int");

                    b.Property<int>("GradeUnknownCount")
                        .HasColumnType("int");

                    b.Property<string>("MedDraTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PeriodYear")
                        .HasColumnType("int");

                    b.ToView("vwAdverseEventAnnualList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.AdverseEventList", b =>
                {
                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientCount")
                        .HasColumnType("int");

                    b.Property<string>("Serious")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("vwAdverseEventList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.AdverseEventQuarterlyList", b =>
                {
                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade1Count")
                        .HasColumnType("int");

                    b.Property<int>("Grade2Count")
                        .HasColumnType("int");

                    b.Property<int>("Grade3Count")
                        .HasColumnType("int");

                    b.Property<int>("Grade4Count")
                        .HasColumnType("int");

                    b.Property<int>("Grade5Count")
                        .HasColumnType("int");

                    b.Property<int>("GradeUnknownCount")
                        .HasColumnType("int");

                    b.Property<string>("MedDraTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PeriodQuarter")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodYear")
                        .HasColumnType("int");

                    b.ToView("vwAdverseEventQuarterlyList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.AppointmentList", b =>
                {
                    b.Property<string>("AppointmentDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("AppointmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EncounterId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("vwAppointmentList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.CausalityNotSetList", b =>
                {
                    b.Property<string>("AdverseEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicationidentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NaranjoCausality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OnsetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Patient_Id")
                        .HasColumnType("int");

                    b.Property<string>("Serious")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoCausality")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("vwCausalityNotSetList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.ContingencyAnalysisItem", b =>
                {
                    b.Property<decimal>("AdjustedRelativeRisk")
                        .HasPrecision(9, 2)
                        .HasColumnType("Decimal(9,2)");

                    b.Property<decimal>("ConfidenceIntervalHigh")
                        .HasPrecision(9, 2)
                        .HasColumnType("Decimal(9,2)");

                    b.Property<decimal>("ConfidenceIntervalLow")
                        .HasPrecision(9, 2)
                        .HasColumnType("Decimal(9,2)");

                    b.Property<string>("Drug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExposedCases")
                        .HasColumnType("int");

                    b.Property<decimal>("ExposedIncidenceRate")
                        .HasPrecision(9, 2)
                        .HasColumnType("Decimal(9,2)");

                    b.Property<int>("ExposedNonCases")
                        .HasColumnType("int");

                    b.Property<decimal>("ExposedPopulation")
                        .HasPrecision(9, 2)
                        .HasColumnType("Decimal(9,2)");

                    b.Property<int>("Medication_Id")
                        .HasColumnType("int");

                    b.Property<int>("NonExposedCases")
                        .HasColumnType("int");

                    b.Property<decimal>("NonExposedIncidenceRate")
                        .HasPrecision(9, 2)
                        .HasColumnType("Decimal(9,2)");

                    b.Property<int>("NonExposedNonCases")
                        .HasColumnType("int");

                    b.Property<decimal>("NonExposedPopulation")
                        .HasPrecision(9, 2)
                        .HasColumnType("Decimal(9,2)");

                    b.Property<decimal>("UnadjustedRelativeRisk")
                        .HasPrecision(9, 2)
                        .HasColumnType("Decimal(9,2)");

                    b.ToView("vwContingencyAnalysisItem");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.ContingencyAnalysisList", b =>
                {
                    b.Property<string>("MeddraTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TerminologyMeddra_Id")
                        .HasColumnType("int");

                    b.ToView("vwContingencyAnalysisList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.ContingencyAnalysisPatient", b =>
                {
                    b.Property<int>("ADR")
                        .HasColumnType("int");

                    b.Property<int>("DaysContributed")
                        .HasColumnType("int");

                    b.Property<string>("Drug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FactorMet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinishDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskFactorOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("vwContingencyAnalysisPatient");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.DrugList", b =>
                {
                    b.Property<int>("ConceptId")
                        .HasColumnType("int");

                    b.Property<string>("ConceptName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientCount")
                        .HasColumnType("int");

                    b.ToView("vwDrugList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.EncounterList", b =>
                {
                    b.Property<string>("EncounterDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EncounterId")
                        .HasColumnType("int");

                    b.Property<string>("EncounterType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("vwEncounterList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.MetaPatientList", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.ToView("vwMetaPatientList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.OutstandingVisitList", b =>
                {
                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Patient_Id")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("vwOutstandingVisitList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.PatientList", b =>
                {
                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatestEncounterDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("vwPatientVisitList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Keyless.PatientOnStudyList", b =>
                {
                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientCount")
                        .HasColumnType("int");

                    b.Property<int>("PatientWithEventCount")
                        .HasColumnType("int");

                    b.Property<int>("PatientWithNonSeriousEventCount")
                        .HasColumnType("int");

                    b.Property<int>("PatientWithSeriousEventCount")
                        .HasColumnType("int");

                    b.ToView("vwPatientOnStudyVisitList");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.LabResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("LabResult");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.LabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("LabTest");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.LabTestUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("LabTestUnit");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("Language");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MedDRAGrading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ScaleId")
                        .HasColumnType("int")
                        .HasColumnName("Scale_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScaleId" }, "IX_Scale_Id");

                    b.ToTable("MedDRAGrading");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MedDRAScale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("GradingScaleId")
                        .HasColumnType("int")
                        .HasColumnName("GradingScale_Id");

                    b.Property<int>("TerminologyMedDraId")
                        .HasColumnType("int")
                        .HasColumnName("TerminologyMedDra_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GradingScaleId" }, "IX_GradingScale_Id");

                    b.HasIndex(new[] { "TerminologyMedDraId" }, "IX_TerminologyMedDra_Id")
                        .HasDatabaseName("IX_TerminologyMedDra_Id1");

                    b.ToTable("MedDRAScale");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MedicationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("MedicationForm");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ColumnTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ColumnType_Id");

                    b.Property<bool>("IsIdentity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MetaColumnGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("metacolumn_guid");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("Table_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ColumnTypeId" }, "IX_ColumnType_Id");

                    b.HasIndex(new[] { "TableId" }, "IX_Table_Id");

                    b.ToTable("MetaColumn");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaColumnType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MetaColumnTypeGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("metacolumntype_guid");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("MetaColumnType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaDependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("MetaDependencyGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("metadependency_guid");

                    b.Property<string>("ParentColumnName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ParentTableId")
                        .HasColumnType("int")
                        .HasColumnName("ParentTable_Id");

                    b.Property<string>("ReferenceColumnName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReferenceTableId")
                        .HasColumnType("int")
                        .HasColumnName("ReferenceTable_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentTableId" }, "IX_ParentTable_Id");

                    b.HasIndex(new[] { "ReferenceTableId" }, "IX_ReferenceTable_Id");

                    b.ToTable("MetaDependency");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MetaDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MetaFormGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("metaform_guid");

                    b.HasKey("Id");

                    b.HasIndex("FormName")
                        .IsUnique();

                    b.ToTable("MetaForm");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Breadcrumb")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MetaPageGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("metapage_guid");

                    b.Property<string>("PageDefinition")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PageName")
                        .IsUnique();

                    b.ToTable("MetaPage");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Breadcrumb")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MetaDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MetaReportGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("metareport_guid");

                    b.Property<string>("ReportDefinition")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReportStatus")
                        .HasColumnType("int");

                    b.Property<string>("SqlDefinition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SQLDefinition");

                    b.HasKey("Id");

                    b.HasIndex("ReportName")
                        .IsUnique();

                    b.ToTable("MetaReport");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FriendlyDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("MetaTableGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("metatable_guid");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TableTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TableType_Id");

                    b.HasKey("Id");

                    b.HasIndex("TableName")
                        .IsUnique();

                    b.HasIndex(new[] { "TableTypeId" }, "IX_TableType_Id");

                    b.ToTable("MetaTable");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaTableType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MetaTableTypeGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("metatabletype_guid");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("MetaTableType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaWidget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MetaPageId")
                        .HasColumnType("int")
                        .HasColumnName("MetaPage_Id");

                    b.Property<Guid>("MetaWidgetGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("metawidget_guid");

                    b.Property<string>("WidgetDefinition")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("WidgetLocation")
                        .HasColumnType("int");

                    b.Property<string>("WidgetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WidgetStatus")
                        .HasColumnType("int");

                    b.Property<int>("WidgetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WidgetType_Id");

                    b.HasKey("Id");

                    b.HasIndex("WidgetName")
                        .IsUnique();

                    b.HasIndex(new[] { "MetaPageId" }, "IX_MetaPage_Id");

                    b.HasIndex(new[] { "WidgetTypeId" }, "IX_WidgetType_Id");

                    b.ToTable("MetaWidget");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaWidgetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MetaWidgetTypeGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("metawidgettype_guid");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("MetaWidgetType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.OrgUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrgUnitTypeId")
                        .HasColumnType("int")
                        .HasColumnName("OrgUnitType_Id");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_Id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex(new[] { "OrgUnitTypeId" }, "IX_OrgUnitType_Id");

                    b.HasIndex(new[] { "ParentId" }, "IX_Parent_Id");

                    b.ToTable("OrgUnit");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.OrgUnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("OrgUnitTypes");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Outcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("Outcome");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<string>("CustomAttributesXmlSerialised")
                        .HasColumnType("xml");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("DateOfBirth");

                    b.HasIndex("Surname", "FirstName");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id")
                        .HasDatabaseName("IX_AuditUser_Id4");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id10");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id10");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientClinicalEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<string>("CustomAttributesXmlSerialised")
                        .HasColumnType("xml");

                    b.Property<int?>("EncounterId")
                        .HasColumnType("int")
                        .HasColumnName("Encounter_Id");

                    b.Property<DateTime?>("OnsetDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PatientClinicalEventGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("date");

                    b.Property<string>("SourceDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SourceTerminologyMedDraId")
                        .HasColumnType("int")
                        .HasColumnName("SourceTerminologyMedDra_Id");

                    b.Property<int?>("TerminologyMedDraId1")
                        .HasColumnType("int")
                        .HasColumnName("TerminologyMedDra_Id1");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id")
                        .HasDatabaseName("IX_AuditUser_Id5");

                    b.HasIndex(new[] { "EncounterId" }, "IX_Encounter_Id")
                        .HasDatabaseName("IX_Encounter_Id1");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id4");

                    b.HasIndex(new[] { "SourceTerminologyMedDraId" }, "IX_SourceTerminologyMedDra_Id");

                    b.ToTable("PatientClinicalEvent");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_Id");

                    b.Property<string>("ConditionSource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CustomAttributesXmlSerialised")
                        .HasColumnType("xml");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OutcomeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OutcomeId")
                        .HasColumnType("int")
                        .HasColumnName("Outcome_Id");

                    b.Property<Guid>("PatientConditionGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.Property<int?>("TerminologyMedDraId")
                        .HasColumnType("int")
                        .HasColumnName("TerminologyMedDra_Id");

                    b.Property<int?>("TreatmentOutcomeId")
                        .HasColumnType("int")
                        .HasColumnName("TreatmentOutcome_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id")
                        .HasDatabaseName("IX_AuditUser_Id6");

                    b.HasIndex(new[] { "ConditionId" }, "IX_Condition_Id")
                        .HasDatabaseName("IX_Condition_Id6");

                    b.HasIndex(new[] { "OutcomeId" }, "IX_Outcome_Id");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id5");

                    b.HasIndex(new[] { "TerminologyMedDraId" }, "IX_TerminologyMedDra_Id")
                        .HasDatabaseName("IX_TerminologyMedDra_Id2");

                    b.HasIndex(new[] { "TreatmentOutcomeId" }, "IX_TreatmentOutcome_Id");

                    b.ToTable("PatientCondition");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<DateTime>("EnrolledDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int")
                        .HasColumnName("Facility_Id");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.HasKey("Id");

                    b.HasIndex("PatientId", "FacilityId");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id")
                        .HasDatabaseName("IX_AuditUser_Id7");

                    b.HasIndex(new[] { "FacilityId" }, "IX_Facility_Id")
                        .HasDatabaseName("IX_Facility_Id1");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id6");

                    b.ToTable("PatientFacility");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<string>("CustomAttributesXmlSerialised")
                        .HasColumnType("xml");

                    b.Property<int>("LabTestId")
                        .HasColumnType("int")
                        .HasColumnName("LabTest_Id");

                    b.Property<string>("LabTestSource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LabValue")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.Property<Guid>("PatientLabTestGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ReferenceLower")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReferenceUpper")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TestResult")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TestUnitId")
                        .HasColumnType("int")
                        .HasColumnName("TestUnit_Id");

                    b.HasKey("Id");

                    b.HasIndex("PatientId", "LabTestId");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id")
                        .HasDatabaseName("IX_AuditUser_Id8");

                    b.HasIndex(new[] { "LabTestId" }, "IX_LabTest_Id")
                        .HasDatabaseName("IX_LabTest_Id1");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id7");

                    b.HasIndex(new[] { "TestUnitId" }, "IX_TestUnit_Id");

                    b.ToTable("PatientLabTest");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("Language_Id");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.Property<bool>("Preferred")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PatientId", "LanguageId")
                        .IsUnique();

                    b.HasIndex(new[] { "LanguageId" }, "IX_Language_Id");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id8");

                    b.ToTable("PatientLanguage");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<int>("ConceptId")
                        .HasColumnType("int")
                        .HasColumnName("Concept_Id");

                    b.Property<string>("CustomAttributesXmlSerialised")
                        .HasColumnType("xml");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Dose")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DoseFrequency")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DoseUnit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MedicationSource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.Property<Guid>("PatientMedicationGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Id");

                    b.HasKey("Id");

                    b.HasIndex("PatientId", "ConceptId", "ProductId");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id")
                        .HasDatabaseName("IX_AuditUser_Id9");

                    b.HasIndex(new[] { "ConceptId" }, "IX_Concept_Id")
                        .HasDatabaseName("IX_Concept_Id2");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id9");

                    b.HasIndex(new[] { "ProductId" }, "IX_Product_Id")
                        .HasDatabaseName("IX_Product_Id1");

                    b.ToTable("PatientMedication");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description");

                    b.ToTable("PatientStatus");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ArchivedReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUser_Id");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.Property<int>("PatientStatusId")
                        .HasColumnType("int")
                        .HasColumnName("PatientStatus_Id");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex("PatientId", "PatientStatusId");

                    b.HasIndex(new[] { "AuditUserId" }, "IX_AuditUser_Id")
                        .HasDatabaseName("IX_AuditUser_Id10");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id11");

                    b.HasIndex(new[] { "PatientStatusId" }, "IX_PatientStatus_Id");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id10");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id11");

                    b.ToTable("PatientStatusHistory");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PostDeployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("RunDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("RunRank")
                        .HasColumnType("int");

                    b.Property<string>("ScriptDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ScriptFileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ScriptGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScriptFileName" }, "IX_ScriptFileName")
                        .IsUnique();

                    b.ToTable("PostDeployment");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Pregnancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("InitialGestation")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id");

                    b.Property<string>("PreferredFeedingChoice")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id12");

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_Id")
                        .HasDatabaseName("IX_Patient_Id11");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id12");

                    b.ToTable("Pregnancy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ConceptId")
                        .HasColumnType("int")
                        .HasColumnName("Concept_Id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProductName")
                        .IsUnique();

                    b.HasIndex(new[] { "ConceptId" }, "IX_Concept_Id")
                        .HasDatabaseName("IX_Concept_Id3");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ReportInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("ContextGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("datetime");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("PatientIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportInstanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TerminologyMedDraId")
                        .HasColumnType("int")
                        .HasColumnName("TerminologyMedDra_Id");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int")
                        .HasColumnName("WorkFlow_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id13");

                    b.HasIndex(new[] { "TerminologyMedDraId" }, "IX_TerminologyMedDra_Id")
                        .HasDatabaseName("IX_TerminologyMedDra_Id3");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id13");

                    b.HasIndex(new[] { "WorkFlowId" }, "IX_WorkFlow_Id")
                        .HasDatabaseName("IX_WorkFlow_Id1");

                    b.ToTable("ReportInstance");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ReportInstanceMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("MedicationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NaranjoCausality")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ReportInstanceId")
                        .HasColumnType("int")
                        .HasColumnName("ReportInstance_Id");

                    b.Property<Guid>("ReportInstanceMedicationGuid")
                        .HasMaxLength(30)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WhoCausality")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReportInstanceId" }, "IX_ReportInstance_Id")
                        .HasDatabaseName("IX_ReportInstance_Id1");

                    b.ToTable("ReportInstanceMedication");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.RiskFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FactorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FactorName")
                        .IsUnique();

                    b.ToTable("RiskFactor");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.RiskFactorOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Display")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int")
                        .HasColumnName("RiskFactor_Id");

                    b.HasKey("Id");

                    b.HasIndex("OptionName")
                        .IsUnique();

                    b.HasIndex(new[] { "RiskFactorId" }, "IX_RiskFactor_Id");

                    b.ToTable("RiskFactorOption");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.SelectionDataItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AttributeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeKey")
                        .IsUnique()
                        .HasFilter("[AttributeKey] IS NOT NULL");

                    b.ToTable("SelectionDataItem");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.SiteContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactFirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ContactType")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id14");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id14");

                    b.ToTable("SiteContactDetail");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.SystemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedBy_Id");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionStackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerExceptionStackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("RemoteIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedBy_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedById" }, "IX_CreatedBy_Id")
                        .HasDatabaseName("IX_CreatedBy_Id15");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_UpdatedBy_Id")
                        .HasDatabaseName("IX_UpdatedBy_Id15");

                    b.ToTable("SystemLog");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.TerminologyIcd10", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasFilter("[Description] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("TerminologyIcd10");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.TerminologyMedDra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Common")
                        .HasColumnType("bit");

                    b.Property<string>("MedDraCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MedDraTerm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MedDraTermType")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("MedDraVersion")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_Id");

                    b.HasKey("Id");

                    b.HasIndex("MedDraCode")
                        .IsUnique();

                    b.HasIndex("MedDraTerm")
                        .IsUnique();

                    b.HasIndex(new[] { "ParentId" }, "IX_Parent_Id")
                        .HasDatabaseName("IX_Parent_Id1");

                    b.ToTable("TerminologyMedDra");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.TreatmentOutcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("TreatmentOutcome");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.WorkFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("WorkFlowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("WorkFlow");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.WorkPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DatasetId")
                        .HasColumnType("int")
                        .HasColumnName("Dataset_Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex(new[] { "DatasetId" }, "IX_Dataset_Id")
                        .HasDatabaseName("IX_Dataset_Id3");

                    b.ToTable("WorkPlan");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.WorkPlanCareEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CareEventId")
                        .HasColumnType("int")
                        .HasColumnName("CareEvent_Id");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<int>("WorkPlanId")
                        .HasColumnType("int")
                        .HasColumnName("WorkPlan_Id");

                    b.HasKey("Id");

                    b.HasIndex("WorkPlanId", "CareEventId")
                        .IsUnique();

                    b.HasIndex(new[] { "CareEventId" }, "IX_CareEvent_Id");

                    b.HasIndex(new[] { "WorkPlanId" }, "IX_WorkPlan_Id")
                        .HasDatabaseName("IX_WorkPlan_Id1");

                    b.ToTable("WorkPlanCareEvent");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.WorkPlanCareEventDatasetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DatasetCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("DatasetCategory_Id");

                    b.Property<int>("WorkPlanCareEventId")
                        .HasColumnType("int")
                        .HasColumnName("WorkPlanCareEvent_Id");

                    b.HasKey("Id");

                    b.HasIndex("WorkPlanCareEventId", "DatasetCategoryId")
                        .IsUnique();

                    b.HasIndex(new[] { "DatasetCategoryId" }, "IX_DatasetCategory_Id")
                        .HasDatabaseName("IX_DatasetCategory_Id2");

                    b.HasIndex(new[] { "WorkPlanCareEventId" }, "IX_WorkPlanCareEvent_Id");

                    b.ToTable("WorkPlanCareEventDatasetCategory");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Accounts.RefreshToken", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.RefreshToken_dbo.User_User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Accounts.UserFacility", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Facility", "Facility")
                        .WithMany("UserFacilities")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK_dbo.UserFacility_dbo.Facility_Facility_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "User")
                        .WithMany("Facilities")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserFacility_dbo.User_User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Accounts.UserRole", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.UserRole_dbo.Role_Role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserRole_dbo.User_User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Activity", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.WorkFlow", "WorkFlow")
                        .WithMany("Activities")
                        .HasForeignKey("WorkFlowId")
                        .HasConstraintName("FK_dbo.Activity_dbo.WorkFlow_WorkFlow_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkFlow");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ActivityExecutionStatus", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Activity", "Activity")
                        .WithMany("ExecutionStatuses")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_dbo.ActivityExecutionStatus_dbo.Activity_Activity_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ActivityExecutionStatusEvent", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.ActivityInstance", "ActivityInstance")
                        .WithMany("ExecutionEvents")
                        .HasForeignKey("ActivityInstanceId")
                        .HasConstraintName("FK_dbo.ActivityExecutionStatusEvent_dbo.ActivityInstance_ActivityInstance_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "EventCreatedBy")
                        .WithMany("ExecutionEvents")
                        .HasForeignKey("EventCreatedById")
                        .HasConstraintName("FK_dbo.ActivityExecutionStatusEvent_dbo.User_EventCreatedBy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.ActivityExecutionStatus", "ExecutionStatus")
                        .WithMany("ExecutionEvents")
                        .HasForeignKey("ExecutionStatusId")
                        .HasConstraintName("FK_dbo.ActivityExecutionStatusEvent_dbo.ActivityExecutionStatus_ExecutionStatus_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityInstance");

                    b.Navigation("EventCreatedBy");

                    b.Navigation("ExecutionStatus");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ActivityInstance", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("ActivityInstanceCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.ActivityInstance_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.ActivityExecutionStatus", "CurrentStatus")
                        .WithMany("ActivityInstances")
                        .HasForeignKey("CurrentStatusId")
                        .HasConstraintName("FK_dbo.ActivityInstance_dbo.ActivityExecutionStatus_CurrentStatus_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.ReportInstance", "ReportInstance")
                        .WithMany("Activities")
                        .HasForeignKey("ReportInstanceId")
                        .HasConstraintName("FK_dbo.ActivityInstance_dbo.ReportInstance_ReportInstance_Id1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("ActivityInstanceUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.ActivityInstance_dbo.User_UpdatedBy_Id");

                    b.Navigation("CreatedBy");

                    b.Navigation("CurrentStatus");

                    b.Navigation("ReportInstance");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Appointment", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("Appointments")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.Appointment_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("AppointmentCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.Appointment_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.Appointment_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("AppointmentUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.Appointment_dbo.User_UpdatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AuditUser");

                    b.Navigation("CreatedBy");

                    b.Navigation("Patient");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Attachment", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.ActivityExecutionStatusEvent", "ActivityExecutionStatusEvent")
                        .WithMany("Attachments")
                        .HasForeignKey("ActivityExecutionStatusEventId")
                        .HasConstraintName("FK_dbo.Attachment_dbo.ActivityExecutionStatusEvent_ActivityExecutionStatusEvent_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PVIMS.Core.Entities.AttachmentType", "AttachmentType")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentTypeId")
                        .HasConstraintName("FK_dbo.Attachment_dbo.AttachmentType_AttachmentType_Id")
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("Attachments")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.Attachment_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("AttachmentCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.Attachment_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Encounter", "Encounter")
                        .WithMany("Attachments")
                        .HasForeignKey("EncounterId")
                        .HasConstraintName("FK_dbo.Attachment_dbo.Encounter_Encounter_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("Attachments")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.Attachment_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("AttachmentUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.Attachment_dbo.User_UpdatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ActivityExecutionStatusEvent");

                    b.Navigation("AttachmentType");

                    b.Navigation("AuditUser");

                    b.Navigation("CreatedBy");

                    b.Navigation("Encounter");

                    b.Navigation("Patient");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.AuditLog", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AuditLog_dbo.User_User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.CohortGroup", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Condition", "Condition")
                        .WithMany("CohortGroups")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_dbo.CohortGroup_dbo.Condition_Condition_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.CohortGroupEnrolment", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("CohortGroupEnrolments")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.CohortGroupEnrolment_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.CohortGroup", "CohortGroup")
                        .WithMany("CohortGroupEnrolments")
                        .HasForeignKey("CohortGroupId")
                        .HasConstraintName("FK_dbo.CohortGroupEnrolment_dbo.CohortGroup_CohortGroup_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("CohortEnrolments")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.CohortGroupEnrolment_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditUser");

                    b.Navigation("CohortGroup");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Concept", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.MedicationForm", "MedicationForm")
                        .WithMany("Concepts")
                        .HasForeignKey("MedicationFormId")
                        .HasConstraintName("FK_dbo.Concept_dbo.MedicationForm_MedicationForm_Id")
                        .IsRequired();

                    b.Navigation("MedicationForm");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ConceptIngredient", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Concept", "Concept")
                        .WithMany("ConceptIngredients")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("FK_dbo.ConceptIngredient_dbo.Concept_Concept_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concept");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ConditionLabTest", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Condition", "Condition")
                        .WithMany("ConditionLabTests")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_dbo.ConditionLabTest_dbo.Condition_Condition_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.LabTest", "LabTest")
                        .WithMany("ConditionLabTests")
                        .HasForeignKey("LabTestId")
                        .HasConstraintName("FK_dbo.ConditionLabTest_dbo.LabTest_LabTest_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("LabTest");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ConditionMedDra", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Condition", "Condition")
                        .WithMany("ConditionMedDras")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_dbo.ConditionMedDra_dbo.Condition_Condition_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.TerminologyMedDra", "TerminologyMedDra")
                        .WithMany("ConditionMedDras")
                        .HasForeignKey("TerminologyMedDraId")
                        .HasConstraintName("FK_dbo.ConditionMedDra_dbo.TerminologyMedDra_TerminologyMedDra_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("TerminologyMedDra");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ConditionMedication", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Concept", "Concept")
                        .WithMany("ConditionMedications")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("FK_dbo.ConditionMedication_dbo.Concept_Concept_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Condition", "Condition")
                        .WithMany("ConditionMedications")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_dbo.ConditionMedication_dbo.Condition_Condition_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Product", "Product")
                        .WithMany("ConditionMedications")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_dbo.ConditionMedication_dbo.Product_Product_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Concept");

                    b.Navigation("Condition");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Config", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("ConfigCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.Config_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("ConfigUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.Config_dbo.User_UpdatedBy_Id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Dataset", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.ContextType", "ContextType")
                        .WithMany("Datasets")
                        .HasForeignKey("ContextTypeId")
                        .HasConstraintName("FK_dbo.Dataset_dbo.ContextType_ContextType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("DatasetCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.Dataset_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetXml", "DatasetXml")
                        .WithMany("Datasets")
                        .HasForeignKey("DatasetXmlId")
                        .HasConstraintName("FK_dbo.Dataset_dbo.DatasetXml_DatasetXml_Id");

                    b.HasOne("PVIMS.Core.Entities.EncounterTypeWorkPlan", "EncounterTypeWorkPlan")
                        .WithMany("Datasets")
                        .HasForeignKey("EncounterTypeWorkPlanId")
                        .HasConstraintName("FK_dbo.Dataset_dbo.EncounterTypeWorkPlan_EncounterTypeWorkPlan_Id");

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("DatasetUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.Dataset_dbo.User_UpdatedBy_Id");

                    b.Navigation("ContextType");

                    b.Navigation("CreatedBy");

                    b.Navigation("DatasetXml");

                    b.Navigation("EncounterTypeWorkPlan");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetCategory", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Dataset", "Dataset")
                        .WithMany("DatasetCategories")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("FK_dbo.DatasetCategory_dbo.Dataset_Dataset_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetCategoryCondition", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Condition", "Condition")
                        .WithMany("DatasetCategoryConditions")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_dbo.DatasetCategoryCondition_dbo.Condition_Condition_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetCategory", "DatasetCategory")
                        .WithMany("DatasetCategoryConditions")
                        .HasForeignKey("DatasetCategoryId")
                        .HasConstraintName("FK_dbo.DatasetCategoryCondition_dbo.DatasetCategory_DatasetCategory_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("DatasetCategory");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetCategoryElement", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.DatasetCategory", "DatasetCategory")
                        .WithMany("DatasetCategoryElements")
                        .HasForeignKey("DatasetCategoryId")
                        .HasConstraintName("FK_dbo.DatasetCategoryElement_dbo.DatasetCategory_DatasetCategory_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetElement", "DatasetElement")
                        .WithMany("DatasetCategoryElements")
                        .HasForeignKey("DatasetElementId")
                        .HasConstraintName("FK_dbo.DatasetCategoryElement_dbo.DatasetElement_DatasetElement_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatasetCategory");

                    b.Navigation("DatasetElement");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetCategoryElementCondition", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Condition", "Condition")
                        .WithMany("DatasetCategoryElementConditions")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_dbo.DatasetCategoryElementCondition_dbo.Condition_Condition_Id")
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetCategoryElement", "DatasetCategoryElement")
                        .WithMany("DatasetCategoryElementConditions")
                        .HasForeignKey("DatasetCategoryElementId")
                        .HasConstraintName("FK_dbo.DatasetCategoryElementCondition_dbo.DatasetCategoryElement_DatasetCategoryElement_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("DatasetCategoryElement");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetElement", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.DatasetElementType", "DatasetElementType")
                        .WithMany("DatasetElements")
                        .HasForeignKey("DatasetElementTypeId")
                        .HasConstraintName("FK_dbo.DatasetElement_dbo.DatasetElementType_DatasetElementType_Id")
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Field", "Field")
                        .WithMany("DatasetElements")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("FK_dbo.DatasetElement_dbo.Field_Field_Id")
                        .IsRequired();

                    b.Navigation("DatasetElementType");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetElementSub", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.DatasetElement", "DatasetElement")
                        .WithMany("DatasetElementSubs")
                        .HasForeignKey("DatasetElementId")
                        .HasConstraintName("FK_dbo.DatasetElementSub_dbo.DatasetElement_DatasetElement_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Field", "Field")
                        .WithMany("DatasetElementSubs")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("FK_dbo.DatasetElementSub_dbo.Field_Field_Id")
                        .IsRequired();

                    b.Navigation("DatasetElement");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetInstance", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("DatasetInstanceCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.DatasetInstance_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Dataset", "Dataset")
                        .WithMany("DatasetInstances")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("FK_dbo.DatasetInstance_dbo.Dataset_Dataset_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.EncounterTypeWorkPlan", "EncounterTypeWorkPlan")
                        .WithMany("DatasetInstances")
                        .HasForeignKey("EncounterTypeWorkPlanId")
                        .HasConstraintName("FK_dbo.DatasetInstance_dbo.EncounterTypeWorkPlan_EncounterTypeWorkPlan_Id");

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("DatasetInstanceUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.DatasetInstance_dbo.User_UpdatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("Dataset");

                    b.Navigation("EncounterTypeWorkPlan");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetInstanceSubValue", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.DatasetElementSub", "DatasetElementSub")
                        .WithMany("DatasetInstanceSubValues")
                        .HasForeignKey("DatasetElementSubId")
                        .HasConstraintName("FK_dbo.DatasetInstanceSubValue_dbo.DatasetElementSub_DatasetElementSub_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetInstanceValue", "DatasetInstanceValue")
                        .WithMany("DatasetInstanceSubValues")
                        .HasForeignKey("DatasetInstanceValueId")
                        .HasConstraintName("FK_dbo.DatasetInstanceSubValue_dbo.DatasetInstanceValue_DatasetInstanceValue_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DatasetElementSub");

                    b.Navigation("DatasetInstanceValue");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetInstanceValue", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.DatasetElement", "DatasetElement")
                        .WithMany("DatasetInstanceValues")
                        .HasForeignKey("DatasetElementId")
                        .HasConstraintName("FK_dbo.DatasetInstanceValue_dbo.DatasetElement_DatasetElement_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetInstance", "DatasetInstance")
                        .WithMany("DatasetInstanceValues")
                        .HasForeignKey("DatasetInstanceId")
                        .HasConstraintName("FK_dbo.DatasetInstanceValue_dbo.DatasetInstance_DatasetInstance_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatasetElement");

                    b.Navigation("DatasetInstance");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetMapping", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.DatasetCategoryElement", "DestinationElement")
                        .WithMany("DestinationMappings")
                        .HasForeignKey("DestinationElementId")
                        .HasConstraintName("FK_dbo.DatasetMapping_dbo.DatasetCategoryElement_DestinationElement_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetCategoryElement", "SourceElement")
                        .WithMany("SourceMappings")
                        .HasForeignKey("SourceElementId")
                        .HasConstraintName("FK_dbo.DatasetMapping_dbo.DatasetCategoryElement_SourceElement_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DestinationElement");

                    b.Navigation("SourceElement");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetMappingSub", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.DatasetElementSub", "DestinationElement")
                        .WithMany("DatasetMappingSubDestinationElements")
                        .HasForeignKey("DestinationElementId")
                        .HasConstraintName("FK_dbo.DatasetMappingSub_dbo.DatasetElementSub_DestinationElement_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetMapping", "Mapping")
                        .WithMany("SubMappings")
                        .HasForeignKey("MappingId")
                        .HasConstraintName("FK_dbo.DatasetMappingSub_dbo.DatasetMapping_Mapping_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetElementSub", "SourceElement")
                        .WithMany("DatasetMappingSubSourceElements")
                        .HasForeignKey("SourceElementId")
                        .HasConstraintName("FK_dbo.DatasetMappingSub_dbo.DatasetElementSub_SourceElement_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DestinationElement");

                    b.Navigation("Mapping");

                    b.Navigation("SourceElement");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetMappingValue", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.DatasetMapping", "Mapping")
                        .WithMany("DatasetMappingValues")
                        .HasForeignKey("MappingId")
                        .HasConstraintName("FK_dbo.DatasetMappingValue_dbo.DatasetMapping_Mapping_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetMappingSub", "SubMapping")
                        .WithMany("DatasetMappingValues")
                        .HasForeignKey("SubMappingId")
                        .HasConstraintName("FK_dbo.DatasetMappingValue_dbo.DatasetMappingSub_SubMapping_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Mapping");

                    b.Navigation("SubMapping");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetRule", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.DatasetElement", "DatasetElement")
                        .WithMany("DatasetRules")
                        .HasForeignKey("DatasetElementId")
                        .HasConstraintName("FK_dbo.DatasetRule_dbo.DatasetElement_DatasetElement_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PVIMS.Core.Entities.Dataset", "Dataset")
                        .WithMany("DatasetRules")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("FK_dbo.DatasetRule_dbo.Dataset_Dataset_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Dataset");

                    b.Navigation("DatasetElement");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetXml", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("DatasetXmlCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.DatasetXml_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("DatasetXmlUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.DatasetXml_dbo.User_UpdatedBy_Id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetXmlAttribute", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("DatasetXmlAttributeCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.DatasetXmlAttribute_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetElement", "DatasetElement")
                        .WithMany("DatasetXmlAttributes")
                        .HasForeignKey("DatasetElementId")
                        .HasConstraintName("FK_dbo.DatasetXmlAttribute_dbo.DatasetElement_DatasetElement_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PVIMS.Core.Entities.DatasetXmlNode", "ParentNode")
                        .WithMany("NodeAttributes")
                        .HasForeignKey("ParentNodeId")
                        .HasConstraintName("FK_dbo.DatasetXmlAttribute_dbo.DatasetXmlNode_ParentNode_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("DatasetXmlAttributeUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.DatasetXmlAttribute_dbo.User_UpdatedBy_Id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DatasetElement");

                    b.Navigation("ParentNode");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetXmlNode", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("DatasetXmlNodeCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.DatasetXmlNode_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetElement", "DatasetElement")
                        .WithMany("DatasetXmlNodes")
                        .HasForeignKey("DatasetElementId")
                        .HasConstraintName("FK_dbo.DatasetXmlNode_dbo.DatasetElement_DatasetElement_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PVIMS.Core.Entities.DatasetElementSub", "DatasetElementSub")
                        .WithMany("DatasetXmlNodes")
                        .HasForeignKey("DatasetElementSubId")
                        .HasConstraintName("FK_dbo.DatasetXmlNode_dbo.DatasetElementSub_DatasetElementSub_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PVIMS.Core.Entities.DatasetXml", "DatasetXml")
                        .WithMany("ChildrenNodes")
                        .HasForeignKey("DatasetXmlId")
                        .HasConstraintName("FK_dbo.DatasetXmlNode_dbo.DatasetXml_DatasetXml_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.DatasetXmlNode", "ParentNode")
                        .WithMany("ChildrenNodes")
                        .HasForeignKey("ParentNodeId")
                        .HasConstraintName("FK_dbo.DatasetXmlNode_dbo.DatasetXmlNode_ParentNode_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("DatasetXmlNodeUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.DatasetXmlNode_dbo.User_UpdatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DatasetElement");

                    b.Navigation("DatasetElementSub");

                    b.Navigation("DatasetXml");

                    b.Navigation("ParentNode");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Encounter", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("Encounters")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.Encounter_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("EncounterCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.Encounter_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.EncounterType", "EncounterType")
                        .WithMany("Encounters")
                        .HasForeignKey("EncounterTypeId")
                        .HasConstraintName("FK_dbo.Encounter_dbo.EncounterType_EncounterType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("Encounters")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.Encounter_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Pregnancy", "Pregnancy")
                        .WithMany("Encounters")
                        .HasForeignKey("PregnancyId")
                        .HasConstraintName("FK_dbo.Encounter_dbo.Pregnancy_Pregnancy_Id");

                    b.HasOne("PVIMS.Core.Entities.Priority", "Priority")
                        .WithMany("Encounters")
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("FK_dbo.Encounter_dbo.Priority_Priority_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("EncounterUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.Encounter_dbo.User_UpdatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AuditUser");

                    b.Navigation("CreatedBy");

                    b.Navigation("EncounterType");

                    b.Navigation("Patient");

                    b.Navigation("Pregnancy");

                    b.Navigation("Priority");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.EncounterTypeWorkPlan", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.CohortGroup", "CohortGroup")
                        .WithMany("EncounterTypeWorkPlans")
                        .HasForeignKey("CohortGroupId")
                        .HasConstraintName("FK_dbo.EncounterTypeWorkPlan_dbo.CohortGroup_CohortGroup_Id");

                    b.HasOne("PVIMS.Core.Entities.EncounterType", "EncounterType")
                        .WithMany("EncounterTypeWorkPlans")
                        .HasForeignKey("EncounterTypeId")
                        .HasConstraintName("FK_dbo.EncounterTypeWorkPlan_dbo.EncounterType_EncounterType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.WorkPlan", "WorkPlan")
                        .WithMany("EncounterTypeWorkPlans")
                        .HasForeignKey("WorkPlanId")
                        .HasConstraintName("FK_dbo.EncounterTypeWorkPlan_dbo.WorkPlan_WorkPlan_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CohortGroup");

                    b.Navigation("EncounterType");

                    b.Navigation("WorkPlan");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Facility", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.FacilityType", "FacilityType")
                        .WithMany("Facilities")
                        .HasForeignKey("FacilityTypeId")
                        .HasConstraintName("FK_dbo.Facility_dbo.FacilityType_FacilityType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.OrgUnit", "OrgUnit")
                        .WithMany("Facilities")
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("FK_dbo.Facility_dbo.OrgUnit_OrgUnit_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FacilityType");

                    b.Navigation("OrgUnit");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Field", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.FieldType", "FieldType")
                        .WithMany("Fields")
                        .HasForeignKey("FieldTypeId")
                        .HasConstraintName("FK_dbo.Field_dbo.FieldType_FieldType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.FieldValue", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Field", "Field")
                        .WithMany("FieldValues")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("FK_dbo.FieldValue_dbo.Field_Field_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MedDRAGrading", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.MedDRAScale", "Scale")
                        .WithMany("Grades")
                        .HasForeignKey("ScaleId")
                        .HasConstraintName("FK_dbo.MedDRAGrading_dbo.MedDRAScale_Scale_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scale");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MedDRAScale", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.SelectionDataItem", "GradingScale")
                        .WithMany("MedDrascales")
                        .HasForeignKey("GradingScaleId")
                        .HasConstraintName("FK_dbo.MedDRAScale_dbo.SelectionDataItem_GradingScale_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.TerminologyMedDra", "TerminologyMedDra")
                        .WithMany("Scales")
                        .HasForeignKey("TerminologyMedDraId")
                        .HasConstraintName("FK_dbo.MedDRAScale_dbo.TerminologyMedDra_TerminologyMedDra_Id")
                        .IsRequired();

                    b.Navigation("GradingScale");

                    b.Navigation("TerminologyMedDra");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaColumn", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.MetaColumnType", "ColumnType")
                        .WithMany("MetaColumns")
                        .HasForeignKey("ColumnTypeId")
                        .HasConstraintName("FK_dbo.MetaColumn_dbo.MetaColumnType_ColumnType_Id")
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.MetaTable", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .HasConstraintName("FK_dbo.MetaColumn_dbo.MetaTable_Table_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColumnType");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaDependency", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.MetaTable", "ParentTable")
                        .WithMany("MetaDependencyParentTables")
                        .HasForeignKey("ParentTableId")
                        .HasConstraintName("FK_dbo.MetaDependency_dbo.MetaTable_ParentTable_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.MetaTable", "ReferenceTable")
                        .WithMany("MetaDependencyReferenceTables")
                        .HasForeignKey("ReferenceTableId")
                        .HasConstraintName("FK_dbo.MetaDependency_dbo.MetaTable_ReferenceTable_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentTable");

                    b.Navigation("ReferenceTable");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaTable", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.MetaTableType", "TableType")
                        .WithMany("MetaTables")
                        .HasForeignKey("TableTypeId")
                        .HasConstraintName("FK_dbo.MetaTable_dbo.MetaTableType_TableType_Id")
                        .IsRequired();

                    b.Navigation("TableType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaWidget", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.MetaPage", "MetaPage")
                        .WithMany("Widgets")
                        .HasForeignKey("MetaPageId")
                        .HasConstraintName("FK_dbo.MetaWidget_dbo.MetaPage_MetaPage_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.MetaWidgetType", "WidgetType")
                        .WithMany("MetaWidgets")
                        .HasForeignKey("WidgetTypeId")
                        .HasConstraintName("FK_dbo.MetaWidget_dbo.MetaWidgetType_WidgetType_Id")
                        .IsRequired();

                    b.Navigation("MetaPage");

                    b.Navigation("WidgetType");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.OrgUnit", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.OrgUnitType", "OrgUnitType")
                        .WithMany("OrgUnits")
                        .HasForeignKey("OrgUnitTypeId")
                        .HasConstraintName("FK_dbo.OrgUnit_dbo.OrgUnitType_OrgUnitType_Id")
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.OrgUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_dbo.OrgUnit_dbo.OrgUnit_Parent_Id");

                    b.Navigation("OrgUnitType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.OrgUnitType", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.OrgUnitType", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Patient", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("Patients")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.Patient_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("PatientCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.Patient_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("PatientUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.Patient_dbo.User_UpdatedBy_Id");

                    b.Navigation("AuditUser");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientClinicalEvent", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("PatientClinicalEvents")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.PatientClinicalEvent_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.Encounter", "Encounter")
                        .WithMany("PatientClinicalEvents")
                        .HasForeignKey("EncounterId")
                        .HasConstraintName("FK_dbo.PatientClinicalEvent_dbo.Encounter_Encounter_Id");

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("PatientClinicalEvents")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.PatientClinicalEvent_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.TerminologyMedDra", "SourceTerminologyMedDra")
                        .WithMany("PatientClinicalEvents")
                        .HasForeignKey("SourceTerminologyMedDraId")
                        .HasConstraintName("FK_dbo.PatientClinicalEvent_dbo.TerminologyMedDra_SourceTerminologyMedDra_Id");

                    b.Navigation("AuditUser");

                    b.Navigation("Encounter");

                    b.Navigation("Patient");

                    b.Navigation("SourceTerminologyMedDra");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientCondition", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("PatientConditions")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.PatientCondition_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.Condition", "Condition")
                        .WithMany("PatientConditions")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_dbo.PatientCondition_dbo.Condition_Condition_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PVIMS.Core.Entities.Outcome", "Outcome")
                        .WithMany("PatientConditions")
                        .HasForeignKey("OutcomeId")
                        .HasConstraintName("FK_dbo.PatientCondition_dbo.Outcome_Outcome_Id");

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("PatientConditions")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.PatientCondition_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.TerminologyMedDra", "TerminologyMedDra")
                        .WithMany("PatientConditions")
                        .HasForeignKey("TerminologyMedDraId")
                        .HasConstraintName("FK_dbo.PatientCondition_dbo.TerminologyMedDra_TerminologyMedDra_Id");

                    b.HasOne("PVIMS.Core.Entities.TreatmentOutcome", "TreatmentOutcome")
                        .WithMany("PatientConditions")
                        .HasForeignKey("TreatmentOutcomeId")
                        .HasConstraintName("FK_dbo.PatientCondition_dbo.TreatmentOutcome_TreatmentOutcome_Id");

                    b.Navigation("AuditUser");

                    b.Navigation("Condition");

                    b.Navigation("Outcome");

                    b.Navigation("Patient");

                    b.Navigation("TerminologyMedDra");

                    b.Navigation("TreatmentOutcome");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientFacility", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("PatientFacilities")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.PatientFacility_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.Facility", "Facility")
                        .WithMany("PatientFacilities")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK_dbo.PatientFacility_dbo.Facility_Facility_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("PatientFacilities")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.PatientFacility_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditUser");

                    b.Navigation("Facility");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientLabTest", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("PatientLabTests")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.PatientLabTest_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.LabTest", "LabTest")
                        .WithMany("PatientLabTests")
                        .HasForeignKey("LabTestId")
                        .HasConstraintName("FK_dbo.PatientLabTest_dbo.LabTest_LabTest_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("PatientLabTests")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.PatientLabTest_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.LabTestUnit", "TestUnit")
                        .WithMany("PatientLabTests")
                        .HasForeignKey("TestUnitId")
                        .HasConstraintName("FK_dbo.PatientLabTest_dbo.LabTestUnit_TestUnit_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AuditUser");

                    b.Navigation("LabTest");

                    b.Navigation("Patient");

                    b.Navigation("TestUnit");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientLanguage", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Language", "Language")
                        .WithMany("PatientLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.PatientLanguage_dbo.Language_Language_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("PatientLanguages")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.PatientLanguage_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientMedication", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("PatientMedications")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.PatientMedication_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.Concept", "Concept")
                        .WithMany("PatientMedications")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("FK_dbo.PatientMedication_dbo.Concept_Concept_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("PatientMedications")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.PatientMedication_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Product", "Product")
                        .WithMany("PatientMedications")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_dbo.PatientMedication_dbo.Product_Product_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AuditUser");

                    b.Navigation("Concept");

                    b.Navigation("Patient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientStatusHistory", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "AuditUser")
                        .WithMany("PatientStatusHistories")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK_dbo.PatientStatusHistory_dbo.User_AuditUser_Id");

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("PatientStatusHistoryCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.PatientStatusHistory_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("PatientStatusHistories")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.PatientStatusHistory_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.PatientStatus", "PatientStatus")
                        .WithMany("PatientStatusHistories")
                        .HasForeignKey("PatientStatusId")
                        .HasConstraintName("FK_dbo.PatientStatusHistory_dbo.PatientStatus_PatientStatus_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("PatientStatusHistoryUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.PatientStatusHistory_dbo.User_UpdatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AuditUser");

                    b.Navigation("CreatedBy");

                    b.Navigation("Patient");

                    b.Navigation("PatientStatus");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Pregnancy", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("PregnancyCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.Pregnancy_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Patient", "Patient")
                        .WithMany("Pregnancies")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_dbo.Pregnancy_dbo.Patient_Patient_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("PregnancyUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.Pregnancy_dbo.User_UpdatedBy_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("Patient");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Product", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Concept", "Concept")
                        .WithMany("Products")
                        .HasForeignKey("ConceptId")
                        .HasConstraintName("FK_dbo.Product_dbo.Concept_Concept_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concept");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ReportInstance", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("ReportInstanceCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.ReportInstance_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.TerminologyMedDra", "TerminologyMedDra")
                        .WithMany("ReportInstances")
                        .HasForeignKey("TerminologyMedDraId")
                        .HasConstraintName("FK_dbo.ReportInstance_dbo.TerminologyMedDra_TerminologyMedDra_Id");

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("ReportInstanceUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.ReportInstance_dbo.User_UpdatedBy_Id");

                    b.HasOne("PVIMS.Core.Entities.WorkFlow", "WorkFlow")
                        .WithMany("ReportInstances")
                        .HasForeignKey("WorkFlowId")
                        .HasConstraintName("FK_dbo.ReportInstance_dbo.WorkFlow_WorkFlow_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("TerminologyMedDra");

                    b.Navigation("UpdatedBy");

                    b.Navigation("WorkFlow");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ReportInstanceMedication", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.ReportInstance", "ReportInstance")
                        .WithMany("ReportInstanceMedications")
                        .HasForeignKey("ReportInstanceId")
                        .HasConstraintName("FK_dbo.ReportInstanceMedication_dbo.ReportInstance_ReportInstance_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportInstance");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.RiskFactorOption", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.RiskFactor", "RiskFactor")
                        .WithMany("Options")
                        .HasForeignKey("RiskFactorId")
                        .HasConstraintName("FK_dbo.RiskFactorOption_dbo.RiskFactor_RiskFactor_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskFactor");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.SiteContactDetail", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("SiteContactDetailCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.SiteContactDetail_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("SiteContactDetailUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.SiteContactDetail_dbo.User_UpdatedBy_Id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.SystemLog", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "CreatedBy")
                        .WithMany("SystemLogCreations")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_dbo.SystemLog_dbo.User_CreatedBy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.Accounts.User", "UpdatedBy")
                        .WithMany("SystemLogUpdates")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_dbo.SystemLog_dbo.User_UpdatedBy_Id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.TerminologyMedDra", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.TerminologyMedDra", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_dbo.TerminologyMedDra_dbo.TerminologyMedDra_Parent_Id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.WorkPlan", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.Dataset", "Dataset")
                        .WithMany("WorkPlans")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("FK_dbo.WorkPlan_dbo.Dataset_Dataset_Id");

                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.WorkPlanCareEvent", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.CareEvent", "CareEvent")
                        .WithMany("WorkPlanCareEvents")
                        .HasForeignKey("CareEventId")
                        .HasConstraintName("FK_dbo.WorkPlanCareEvent_dbo.CareEvent_CareEvent_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.WorkPlan", "WorkPlan")
                        .WithMany("WorkPlanCareEvents")
                        .HasForeignKey("WorkPlanId")
                        .HasConstraintName("FK_dbo.WorkPlanCareEvent_dbo.WorkPlan_WorkPlan_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareEvent");

                    b.Navigation("WorkPlan");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.WorkPlanCareEventDatasetCategory", b =>
                {
                    b.HasOne("PVIMS.Core.Entities.DatasetCategory", "DatasetCategory")
                        .WithMany("WorkPlanCareEventDatasetCategories")
                        .HasForeignKey("DatasetCategoryId")
                        .HasConstraintName("FK_dbo.WorkPlanCareEventDatasetCategory_dbo.DatasetCategory_DatasetCategory_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PVIMS.Core.Entities.WorkPlanCareEvent", "WorkPlanCareEvent")
                        .WithMany("WorkPlanCareEventDatasetCategories")
                        .HasForeignKey("WorkPlanCareEventId")
                        .HasConstraintName("FK_dbo.WorkPlanCareEventDatasetCategory_dbo.WorkPlanCareEvent_WorkPlanCareEvent_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatasetCategory");

                    b.Navigation("WorkPlanCareEvent");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Accounts.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Accounts.User", b =>
                {
                    b.Navigation("ActivityInstanceCreations");

                    b.Navigation("ActivityInstanceUpdates");

                    b.Navigation("AppointmentCreations");

                    b.Navigation("Appointments");

                    b.Navigation("AppointmentUpdates");

                    b.Navigation("AttachmentCreations");

                    b.Navigation("Attachments");

                    b.Navigation("AttachmentUpdates");

                    b.Navigation("AuditLogs");

                    b.Navigation("CohortGroupEnrolments");

                    b.Navigation("ConfigCreations");

                    b.Navigation("ConfigUpdates");

                    b.Navigation("DatasetCreations");

                    b.Navigation("DatasetInstanceCreations");

                    b.Navigation("DatasetInstanceUpdates");

                    b.Navigation("DatasetUpdates");

                    b.Navigation("DatasetXmlAttributeCreations");

                    b.Navigation("DatasetXmlAttributeUpdates");

                    b.Navigation("DatasetXmlCreations");

                    b.Navigation("DatasetXmlNodeCreations");

                    b.Navigation("DatasetXmlNodeUpdates");

                    b.Navigation("DatasetXmlUpdates");

                    b.Navigation("EncounterCreations");

                    b.Navigation("Encounters");

                    b.Navigation("EncounterUpdates");

                    b.Navigation("ExecutionEvents");

                    b.Navigation("Facilities");

                    b.Navigation("PatientClinicalEvents");

                    b.Navigation("PatientConditions");

                    b.Navigation("PatientCreations");

                    b.Navigation("PatientFacilities");

                    b.Navigation("PatientLabTests");

                    b.Navigation("PatientMedications");

                    b.Navigation("Patients");

                    b.Navigation("PatientStatusHistories");

                    b.Navigation("PatientStatusHistoryCreations");

                    b.Navigation("PatientStatusHistoryUpdates");

                    b.Navigation("PatientUpdates");

                    b.Navigation("PregnancyCreations");

                    b.Navigation("PregnancyUpdates");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ReportInstanceCreations");

                    b.Navigation("ReportInstanceUpdates");

                    b.Navigation("Roles");

                    b.Navigation("SiteContactDetailCreations");

                    b.Navigation("SiteContactDetailUpdates");

                    b.Navigation("SystemLogCreations");

                    b.Navigation("SystemLogUpdates");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Activity", b =>
                {
                    b.Navigation("ExecutionStatuses");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ActivityExecutionStatus", b =>
                {
                    b.Navigation("ActivityInstances");

                    b.Navigation("ExecutionEvents");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ActivityExecutionStatusEvent", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ActivityInstance", b =>
                {
                    b.Navigation("ExecutionEvents");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.AttachmentType", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.CareEvent", b =>
                {
                    b.Navigation("WorkPlanCareEvents");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.CohortGroup", b =>
                {
                    b.Navigation("CohortGroupEnrolments");

                    b.Navigation("EncounterTypeWorkPlans");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Concept", b =>
                {
                    b.Navigation("ConceptIngredients");

                    b.Navigation("ConditionMedications");

                    b.Navigation("PatientMedications");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Condition", b =>
                {
                    b.Navigation("CohortGroups");

                    b.Navigation("ConditionLabTests");

                    b.Navigation("ConditionMedDras");

                    b.Navigation("ConditionMedications");

                    b.Navigation("DatasetCategoryConditions");

                    b.Navigation("DatasetCategoryElementConditions");

                    b.Navigation("PatientConditions");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ContextType", b =>
                {
                    b.Navigation("Datasets");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Dataset", b =>
                {
                    b.Navigation("DatasetCategories");

                    b.Navigation("DatasetInstances");

                    b.Navigation("DatasetRules");

                    b.Navigation("WorkPlans");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetCategory", b =>
                {
                    b.Navigation("DatasetCategoryConditions");

                    b.Navigation("DatasetCategoryElements");

                    b.Navigation("WorkPlanCareEventDatasetCategories");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetCategoryElement", b =>
                {
                    b.Navigation("DatasetCategoryElementConditions");

                    b.Navigation("DestinationMappings");

                    b.Navigation("SourceMappings");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetElement", b =>
                {
                    b.Navigation("DatasetCategoryElements");

                    b.Navigation("DatasetElementSubs");

                    b.Navigation("DatasetInstanceValues");

                    b.Navigation("DatasetRules");

                    b.Navigation("DatasetXmlAttributes");

                    b.Navigation("DatasetXmlNodes");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetElementSub", b =>
                {
                    b.Navigation("DatasetInstanceSubValues");

                    b.Navigation("DatasetMappingSubDestinationElements");

                    b.Navigation("DatasetMappingSubSourceElements");

                    b.Navigation("DatasetXmlNodes");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetElementType", b =>
                {
                    b.Navigation("DatasetElements");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetInstance", b =>
                {
                    b.Navigation("DatasetInstanceValues");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetInstanceValue", b =>
                {
                    b.Navigation("DatasetInstanceSubValues");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetMapping", b =>
                {
                    b.Navigation("DatasetMappingValues");

                    b.Navigation("SubMappings");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetMappingSub", b =>
                {
                    b.Navigation("DatasetMappingValues");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetXml", b =>
                {
                    b.Navigation("ChildrenNodes");

                    b.Navigation("Datasets");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.DatasetXmlNode", b =>
                {
                    b.Navigation("ChildrenNodes");

                    b.Navigation("NodeAttributes");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Encounter", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("PatientClinicalEvents");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.EncounterType", b =>
                {
                    b.Navigation("Encounters");

                    b.Navigation("EncounterTypeWorkPlans");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.EncounterTypeWorkPlan", b =>
                {
                    b.Navigation("DatasetInstances");

                    b.Navigation("Datasets");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Facility", b =>
                {
                    b.Navigation("PatientFacilities");

                    b.Navigation("UserFacilities");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.FacilityType", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Field", b =>
                {
                    b.Navigation("DatasetElements");

                    b.Navigation("DatasetElementSubs");

                    b.Navigation("FieldValues");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.FieldType", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.LabTest", b =>
                {
                    b.Navigation("ConditionLabTests");

                    b.Navigation("PatientLabTests");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.LabTestUnit", b =>
                {
                    b.Navigation("PatientLabTests");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Language", b =>
                {
                    b.Navigation("PatientLanguages");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MedDRAScale", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MedicationForm", b =>
                {
                    b.Navigation("Concepts");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaColumnType", b =>
                {
                    b.Navigation("MetaColumns");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaPage", b =>
                {
                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaTable", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("MetaDependencyParentTables");

                    b.Navigation("MetaDependencyReferenceTables");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaTableType", b =>
                {
                    b.Navigation("MetaTables");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.MetaWidgetType", b =>
                {
                    b.Navigation("MetaWidgets");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.OrgUnit", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.OrgUnitType", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("OrgUnits");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Outcome", b =>
                {
                    b.Navigation("PatientConditions");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Attachments");

                    b.Navigation("CohortEnrolments");

                    b.Navigation("Encounters");

                    b.Navigation("PatientClinicalEvents");

                    b.Navigation("PatientConditions");

                    b.Navigation("PatientFacilities");

                    b.Navigation("PatientLabTests");

                    b.Navigation("PatientLanguages");

                    b.Navigation("PatientMedications");

                    b.Navigation("PatientStatusHistories");

                    b.Navigation("Pregnancies");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.PatientStatus", b =>
                {
                    b.Navigation("PatientStatusHistories");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Pregnancy", b =>
                {
                    b.Navigation("Encounters");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Priority", b =>
                {
                    b.Navigation("Encounters");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.Product", b =>
                {
                    b.Navigation("ConditionMedications");

                    b.Navigation("PatientMedications");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.ReportInstance", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ReportInstanceMedications");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.RiskFactor", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.SelectionDataItem", b =>
                {
                    b.Navigation("MedDrascales");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.TerminologyMedDra", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ConditionMedDras");

                    b.Navigation("PatientClinicalEvents");

                    b.Navigation("PatientConditions");

                    b.Navigation("ReportInstances");

                    b.Navigation("Scales");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.TreatmentOutcome", b =>
                {
                    b.Navigation("PatientConditions");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.WorkFlow", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ReportInstances");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.WorkPlan", b =>
                {
                    b.Navigation("EncounterTypeWorkPlans");

                    b.Navigation("WorkPlanCareEvents");
                });

            modelBuilder.Entity("PVIMS.Core.Entities.WorkPlanCareEvent", b =>
                {
                    b.Navigation("WorkPlanCareEventDatasetCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
